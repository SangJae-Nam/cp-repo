#include <algorithm>
#include <iostream>
#include <utility>
#include <vector>
#include <string>
#include <tuple>
#include <sstream>
#include <numeric>
#include <cassert>
#include <bitset>
#include <queue>
#include <limits>
#include <cmath>
#include <map>
#include <set>
#include <unordered_map>
#include <unordered_set>

using namespace std;

template <typename T5, const T5 (*op)(const T5 &a, const T5 &b)>
class SparseTable {
protected:
	vector<T5> &arr;
	vector<vector<T5>> spt; //Sparse Table logN * N

public:
	SparseTable(vector<T5> &_arr) : arr(_arr) {
		int size = static_cast<int>(arr.size());
		int log2size = static_cast<int>(ceil(log(static_cast<double>(size)) / log(2.0))) + 1;
		spt.resize(log2size + 1, vector<int>(size + 1));
		std::copy(arr.begin(), arr.end(), spt[0].begin());

		for (int i = 1; i <= log2size; i++) {
			for (int j = 0; j + (1 << i) <= size; j++) {
				spt[i][j] = op(spt[i - 1][j], spt[i - 1][j + (1 << (i - 1))]);
			}
		}
	}

	int query(int i, int j) {
		if (i > j) {
			swap(i, j);
		}

		int k = static_cast<int>(floor(log(static_cast<double>(j - i + 1)) / log(2.0)));
		return op(spt[k][i], spt[k][j - (1<<k) + 1]);
	}

	//[startIdx, endIdx] 사이에 target과 같거나 작은 것의 시작점을 찾음
	int findIndexFront(const T5 target, int startIdx, int endIdx) {
		int start = startIdx;
		int end = endIdx;

		while (start < end) {
			int mid = start + (end - start) / 2;
			const T5 val = query(startIdx, mid);
			if (val <= target) {
				end = mid;
			}
			else {
				start = mid + 1;
			}
		}

		return start;
	}

	//[start, end) 사이에 target과 같거나 작은
	int findIndexBack(T5 target, int startIdx, int endIdx) {
	    int start = startIdx;
	    int end = endIdx;

	    while (start < end) {
    	    int mid = (start + end) / 2;
			if (query(mid, endIdx - 1) <= target) {
            	start = mid + 1;
	        } else {
    	        end = mid;
        	}
	    }

    	return start - 1;
	}



	void print() {
		for (size_t i = 0; i < spt.size(); i++) {
			for (size_t j = 0; j < spt[i].size(); j++) {
				cout << spt[i][j] << ' ';
			}
			cout << endl;
		}
	}
};

const int _and(const int &a, const int &b)
{
	return a & b;
}

class Solution {
public:
    int minimumValueSum(vector<int>& nums, vector<int>& andValues) {
		int numsSize = static_cast<int>(nums.size());
		int andsSize = static_cast<int>(andValues.size());
		SparseTable<int, _and> spt(nums);
		vector<vector<int>> dp(andsSize, vector<int>(numsSize, -1));

		int startIdx = spt.findIndexFront(andValues[0], 0, numsSize - 1);
		for (int i = startIdx; i < numsSize; i++) {
			if (spt.query(0, i) == andValues[0]) {
				dp[0][i] = nums[i];
			}
			else {
				break;
			}
		}

		for (int i = 1; i < andsSize; i++) {
			for (int j = i; j < numsSize; j++) {
				int val = numeric_limits<int>::max();
				for (int k = i - 1; k < j; k++) {
					int q = spt.query(k + 1, j);
					if (q > andValues[i]) {
						break;
					}
					if (dp[i - 1][k] != -1) {
						if (q == andValues[i]) {
							val = min(val, dp[i - 1][k] + nums[j]);
						}
					}
				}
				if (val != numeric_limits<int>::max()) {
					dp[i][j] = val;
				}
			}
		}

		for (int i = 0; i < andsSize; i++) {
			for (int j = 0; j < numsSize; j++) {
				cout << dp[i][j] << ' ';
			}
			cout << endl;
		}

		return dp[andsSize - 1][numsSize - 1];
    }
};

int main(int argc, char *argv[])
{
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);

	//vector<int> nums{1, 4, 3, 3, 2};
	//vector<int> andValues{0, 3, 3, 2};
	//vector<int> nums{2, 3, 5, 7, 7, 7, 5};
	//vector<int> andValues{0, 7, 5};
	//vector<int> nums{1, 2, 3, 4};
	//vector<int> andValues{2};

	//vector<int> nums{32,114,114,105,61,37,49,49,122,60,38,55,114,110,37,96,62,34,122,97,98,122,49,106,99,54,57,32,125,38,36,48,62,105,41,119,33,54,125,96,126,127,124,40,50,57,47,62,97,42,58,34,119,44,58,40,60,47,63,117,35,124,41,116,53,127,48,52,33,99,98,100,56,54,61,61,104,42,110,39,53,38,101,49,50,123,40,32,123,56,115,33,63,99,99,100,61,47,99,57};
	//vector<int> andValues{32, 32, 32, 32, 32, 32, 33};

	vector<int> nums{3, 9};
	vector<int> andValues{1};

	Solution s;
	cout << s.minimumValueSum(nums, andValues) << endl;

	return 0;
}
